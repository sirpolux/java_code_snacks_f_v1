{   
    "c1-1":{

    },


    "c2-1":{
        "topic":"Data Types",
        "overView":["In Java programming, data types are fundamental building blocks used to define the type of data that a variable can hold or manipulate. They play a crucial role in defining the behavior and characteristics of variables, objects, and expressions in Java programs. Understanding data types is essential for writing efficient, reliable, and maintainable Java code",
        "In Java, variables must be declared with a specific data type before they can be used. This helps enforce type safety and ensures that variables are used appropriately within the program.",
        "Java provides two main categories of data types: primitive data types and reference data types. Primitive data types represent simple values like numbers and characters, while reference data types refer to objects and arrays created from classes or interfaces.",
        "Primitive data types are predefined by the language and have fixed sizes, while reference data types are created using classes or interfaces defined by the programmer or provided by the Java platform."

        ],
        "readTime":"15",

        "importanceHeading":"",
        "importance":null,
        "videoSrc":"",
        "importanceLen":"short",
        "examples":[
            {
                "category":"Primitive Data Types",
                "data":[
                    {
                        "item": "byte",
                        "note": "Represents a signed 8-bit integer",
                        "example": ["byte myByte = 10;"]
                    },
                    {
                        "item": "short",
                        "note": ["Represents a signed 16-bit integer"],
                        "example": ["short myShort = 1000;"]
                    
                    },
                    {
                        "item": "int",
                        "note": ["Represents a signed 32-bit integer"],
                        "example": ["int myInt = 100000;"]
                    },
                    {
                        "item": "long",
                        "note": ["Represents a signed 64-bit integer"],
                        "example": ["long myLong = 10000000000L;"]
                    },
                    {
                        "item": "float",
                        "note": ["Represents a single-precision 32-bit floating point"],
                        "example": ["float myFloat = 3.14f;"]
                    },
                    {
                        "item": "double",
                        "note": ["Represents a double-precision 64-bit floating point"],
                        "example": ["double myDouble = 3.14159;"]
                    },
                    {
                        "item": "char",
                        "note": ["Represents a single 16-bit Unicode character"],
                        "example": ["char myChar = 'A';"]
                    },
                    {
                        "item": "boolean",
                        "note": ["Represents a boolean value, either true or false"],
                        "example": ["boolean myBoolean = true;"]
                    }
                ]
            },
            {
                "category":"Reference Data Types",
                "data":[
                    {
                        "item": "String",
                        "note": "Represents a sequence of characters",
                        "example": ["String myString = \"Hello, World!\";"]
                    },
                    {
                        "item": "Array",
                        "note": "Represents a collection of elements of the same type",
                        "example": ["int[] myArray = {1, 2, 3, 4, 5};"]
                    },
                    {
                        "item": "Class",
                        "note": "Represents user-defined data types",
                        "example": ["MyClass myObject = new MyClass();"]
                    },
                    {
                        "item": "Interface",
                        "note": "Represents a contract for classes to implement",
                        "example": ["Comparable myInterface = new MyClass();"]
                    }
                ]
            }
            
        ],
        "otherResource":[
            {
                "title": "Oracle's Java Tutorials - Primitive Data Types",
                "link": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
            },
            {
                "title": "GeeksforGeeks - Java Data Types",
                "link": "https://www.geeksforgeeks.org/data-types-in-java/"
            },
            {
                "title": "W3Schools - Java Data Types",
                "link": "https://www.w3schools.com/java/java_data_types.asp"
            },
            {
                "title": "Tutorialspoint - Java Data Types",
                "link": "https://www.tutorialspoint.com/java/java_basic_datatypes.htm"
            }
        ]
        ,
        "summary":["Understanding the characteristics, limitations, and usage of different data types is crucial for effective programming in Java. By choosing the appropriate data types and using them correctly, programmers can write robust and efficient Java code that meets the requirements of their applications"],
        "assessment":[
            {
                "questionType": "TYPE-A",
                "question": "What is the maximum value that can be stored in a `short` data type in Java?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "32,767",
                "options": [
                    "127",
                    "255",
                    "32,767",
                    "65,535"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "Which of the following data types is used to store a single-precision floating-point number in Java?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "float",
                "options": [
                    "float",
                    "double",
                    "int",
                    "long"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "In Java, which data type is used to represent a single Unicode character?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "char",
                "options": [
                    "char",
                    "string",
                    "byte",
                    "int"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "What is the default value for a boolean variable in Java if not explicitly initialized?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "false",
                "options": [
                    "true",
                    "false",
                    "null",
                    "0"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "Which data type is used to represent a sequence of characters in Java?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "string",
                "options": [
                    "char",
                    "string",
                    "byte",
                    "int"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "What is the size of the `int` data type in Java?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "32 bits",
                "options": [
                    "8 bits",
                    "16 bits",
                    "32 bits",
                    "64 bits"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "Which of the following data types can store decimal numbers in Java?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "double",
                "options": [
                    "int",
                    "short",
                    "long",
                    "double",
                    "float"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "What is the keyword used to declare a variable of a reference data type in Java?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "new",
                "options": [
                    "var",
                    "int",
                    "new",
                    "class"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "Which of the following is NOT a primitive data type in Java?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "String",
                "options": [
                    "byte",
                    "char",
                    "String",
                    "long"
                ]
            },
            {
                "questionType": "TYPE-A",
                "question": "Which data type is used to represent an array of elements in Java?",
                "multipleAns": false,
                "resource": "",
                "correctAnswers": "array",
                "options": [
                    "list",
                    "array",
                    "set",
                    "map"
                ]
            }
        ]        
    },
    "c2-2":{
        "topic":"Introduction to Variables",
        "overView":[
            "In Java programming, a variable is a named storage location that holds data, which can be manipulated and accessed within a program. Variables are used to store information such as numbers, characters, strings, and objects, and they play a fundamental role in writing Java programs.",
            "Variables in Java have a data type associated with them, which defines the type of data that can be stored in the variable and the operations that can be performed on it. Java supports two main categories of data types: primitive data types and reference data types.",
            "Variables must be declared before they can be used in Java. The declaration specifies the variable's name and data type. Variables can also be initialized with an initial value at the time of declaration or later in the program."
        ],
        "readTime":"20",
        "importanceHeading":"Java variables follow certain rules and conventions:",
        "importanceLen":"short",
        "importance":[
            {
                "heading":null,
                "text":"Variable names must start with a letter, dollar sign ($), or underscore (_) and can be followed by letters, digits, dollar signs, or underscores"
            },
            {
                "heading":null,
                "text":"Variable names are case-sensitive."
            },
            {
                "heading":null,
                "text":"Variable names should be meaningful and descriptive, following camelCase convention for readability."
            }
        ],
        "exampleLen":"long",
        "examples":[
            {
                "category":null,
                "title":"",
                "data":[
                    {
                        "item": "Variable Declaration and Assignment Example 1:",
                        "note": ["In this example, we declare a variable named age of type int (integer). This statement allocates memory to store an integer value.","The second line assigns the value 25 to the variable age. This means that the memory location allocated for age now holds the value 25."],
                        "example": ["int age; // Declaration of an integer variable named 'age'", "age = 25; // Assignment of the value 25 to the variable 'age'"]
                    },
                    {
                        "item": "Variable Declaration and Assignment Example 2:",
                        "note": ["In this example, we declare and initialize a variable named price of type double. The double data type is used to store decimal numbers.","The value 9.99 is assigned to the price variable at the time of declaration, meaning that memory is allocated for price and immediately set to 9.99."],
                        "example": ["double price = 9.99; // Declaration and initialization of a double variable named 'price' with the value 9.99"
                        ]
                    },
                    {
                        "item": "Variable Declaration and Assignment Example 3:",
                        "note": ["Here, we declare a variable named name of type String. String is a reference data type used to store sequences of characters (text).","Later, we assign the value \"John Doe\" to the name variable. This means that the memory location allocated for name now holds the string \"John Doe\"."],
                        "example": ["String name; // Declaration of a String variable named 'name'", "name = \"John Doe\"; // Assignment of the string value \"John Doe\" to the variable 'name'"
                        ]
                    }

                ]
            }],

        "videoSrc":"",
        "otherResource":[
            {
                "title":"",
                "link":""
            }
        ],
        "summary":["These examples illustrate the process of declaring variables and assigning values to them in Java. Declarations reserve memory space for variables, while assignments set the value stored in that memory space. Understanding how to declare and assign variables is fundamental to programming in Java, as variables are used extensively in writing Java programs."],
        "assessment":[
            {
                "title": "Oracle's Java Tutorials - Variables",
                "link": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html"
            },
            {
                "title": "GeeksforGeeks - Java Variables",
                "link": "https://www.geeksforgeeks.org/variables-in-java/"
            },
            {
                "title": "W3Schools - Java Variables",
                "link": "https://www.w3schools.com/java/java_variables.asp"
            },
            {
                "title": "Tutorialspoint - Java Variables",
                "link": "https://www.tutorialspoint.com/java/java_variable_types.htm"
            }
        ]
        
    },

    "c2-3":{
        "topic":"Arrays",
        "overView":["Arrays in programming are data structures used to store multiple values of the same type under a single variable name. They allow you to organize related data efficiently and access it using an index. Arrays have a fixed size determined when they are declared, and each element in the array can be accessed by its position, or index, within the array. This makes arrays useful for tasks such as storing collections of data, iterating over elements, and performing operations on them in a systematic way."],
        "importanceHeading":"Arrays are important in programming for several reasons:",
        "readTime":"25",
        "importanceLen":"long",
        "importance":[
            {
                "heading":"Efficient Storage",
                "text":"Arrays allow for the efficient storage of multiple values of the same type under a single variable name. This helps in organizing and managing data more effectively."
            },

            {
                "heading":"Random Access",
                "text":"Elements in an array can be accessed directly using their index. This means you can quickly retrieve or modify individual elements without having to traverse the entire data structure."
            },
            {
                "heading":"Memory Management",
                "text":"Arrays provide a contiguous block of memory for storing elements. This makes memory management more straightforward and efficient compared to managing individual variables for each element."
            },
            {
                "heading":"Random Access",
                "text":"Elements in an array can be accessed directly using their index. This means you can quickly retrieve or modify individual elements without having to traverse the entire data structure."
            },
            {
                "heading":"Iterative Operations",
                "text":"Arrays facilitate iterative operations, such as looping through each element of the array to perform operations or computations on them. This is particularly useful for tasks like sorting, searching, or filtering data."
            },
            {
                "heading":"Passing Data",
                "text":"Arrays enable the passing of multiple values to functions or methods in a single parameter, simplifying the code and reducing the need for numerous arguments."
            },
            {
                "heading":"Data Structures",
                "text":" Many other data structures, such as stacks, queues, and matrices, are implemented using arrays as their underlying storage mechanism. Arrays serve as a fundamental building block for more complex data structures."
            },
            {
                "heading":"Efficiency",
                "text":"Due to their simplicity and direct memory access, arrays are often more efficient in terms of time and space complexity compared to other data structures for certain operations."
            },
            {
                "heading":"Flexibility",
                "text":"Arrays can be used to represent various types of data, including integers, floating-point numbers, characters, strings, and custom objects. They provide a flexible way to store and manipulate data in a program"
            }
        ],
        "summary":["Overall, arrays play a crucial role in programming by providing a versatile and efficient means of storing and accessing data, which is essential for developing efficient algorithms and writing maintainable code"],
        "videoSrc":"",
        "examples":null,
        "otherResource":[
            {
                "title":"GeeksforGeeks - Java Arrays",
                "link":"https://www.geeksforgeeks.org/arrays-in-java/"
            },
            {
                "title":"W3Schools - Java Arrays",
                "link":"https://www.w3schools.com/java/java_arrays.asp"
            }
        ],
        "assessment":[
            {
                "questionType":"TYPE-A",
                "question":"What is the size of an array in Java determined by?",
                "multipleAns":false,
                "resource":"",
                "correctAnswers":"The length specified during declaration",
                "options":["The number of elements it currently holds",
                "The length specified during declaration",
                "The sum of elements it contains",
                "The maximum value it can hold"
                ]
            },
            {
                "questionType":"TYPE-A",
                "question":"Which of the following statements is true regarding arrays in Java?",
                "multipleAns":false,
                "resource":"",
                "correctAnswers":"Elements in an array must be of the same data type",
                "options":["Arrays can store elements of different data types",
                "Arrays are fixed in size and cannot be resized",
                "Elements in an array must be of the same data type",
                "Arrays automatically resize themselves as elements are added or removed"
                ]
            },
            {
                "questionType":"TYPE-A",
                "question":"What is the time complexity of accessing an element in an array by its index in Java?",
                "multipleAns":false,
                "resource":"",
                "correctAnswers":"Constant time - O(1)",
                "options":["Constant time - O(1)","Logarithmic time - O(log n)","Linear time - O(n)", "Quadratic time - O(n^2)" ]
            },
            {
                "questionType":"TYPE-A",
                "question":"Which method is used to get the length of an array in Java?",
                "multipleAns":false,
                "resource":"",
                "correctAnswers":"length()",
                "options":["length()", "size()", "getSize()", "length"]
            }

        ]
       
    },
    "c1-2":{

    },
    "temp":{
        "overView":[],
        "importanceHeading":"Arrays are important in programming for several reasons:",
        "importance":[
            {
                "heading":"",
                "text":""
            }
        ],
        "videoSrc":"",
        "otherResource":[
            {
                "title":"",
                "link":""
            }
        ],
        "summary":[],
        "assessment":[
            {
                "questionType":"",
                "question":"",
                "correctAnswers":[],
                "options":[]
            }
        ]
    }
    
}